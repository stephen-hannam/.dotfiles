Short list, just f'ing:
- get keybindings straightened out in -nw mode
- fix existing problems
- add:
    * expand + isolate
    * 




Existing problems:
- smart-parens is all fucked up
- key-bindings will interfere with terminator key-bindings in -nw mode
- aggressive-indent fucks with the undo --> ditch aggressive for something better
- search highlight/clear not happening across all visible buffers <- FIXED, somewhere
- tabularize adds extraneous white-space
- TAB doesn't tab

Switching from/to:
- use-package to straight <-- BUT, decided I'll still use use-package with straight for easier package config
- doom-modeline -> ||| spaceline |||, OR (but prob not) telephone-line, or smart-mode-line w powerline theme, or emacs-powerline (https://github.com/jonathanchu/emacs-powerline)
- ivy/swiper/counsel/ -> vertico, orderless, consult, embark, marginalia, etc
- aggressive-indent -> ? parinfer, evil-surround
- smart-parens -> ? parinfer, evil-surround, dumbparens :),
- company -> ? corfu, cape, dabbrev-*

Extending and/or Fixing:
-- undo-tree --> in side-bar, something sized just wide enough
-- command-log-mode
-- ? smart-parens ... replace or fix ?
-- dired with dired-sidebar ?

Redo:
- LEADER KEYS - refactor into new categories, new category -> "navigation, windows and such"
    -- 3 leaders: windows & navigation, projects & coding, text manipulation

Better Surround !!
-- have a surround sequence that begins by highlighting first expansion level (word/symbol), then allows for incremental expansion of that selected region, and then ends with user selecting from a displayed set of options which text-pair to surround the selected region with.
--> expand-region + siege-mode w/ leader-key-binds and a hydra

Better themes:
- zerodark-theme
- wilmersdorf-emacs-theme aka doom-wilmersdorf
    -- supports solaire-mode

Adding (most likely):
- ? whicher <-- install binaries on which other packages depend ?
- ? save-place <-- save place of cursor in file --> can it be done with built-ins?
- async
- perspective -- project "work-spaces"
- ivy-yasnippet OR skeletons + abbrevmode + conditional hydras
    -- skeletons etc: https://www.gnu.org/software/emacs/manual/html_node/autotype/Wrapping-Skeletons.html
    -- does ivy-yasnippet have ivy as a prereq?
- avy
- sly
- info+
- direnv
- major-mode-hydra -- pretty-hydra <-- requires dash, hydra and s.el
- expand-region <- quick way of precisely successively, hierarchically marking what is at point
- ggtags (w uni-ctags)
- ? git-gutter <-- is it provided by spaceline?
- auto-insert <-- initial file template based on file extension when creating file
- dashboard
- format-all +backends
- icons-in-terminal

Investigate:
- ace-window --> use only for swapping windows around
- which-key-posframe
- lispy
- snails
- shell-pop
- golden-ratio
- volatile-highlights - highlight previously modified region

My own vimrc customizations:
- tabularize -- almost there, still an annoying extra whitespace issue
    -- have a comma align that aligns table-style on all commas

Aims:
- dash-board and org mode (etc) used to habitually organize work/life/study
- common env from within which to view pdfs, images, and other common things
- IDE like env for C/C++, Python, lisps, bash, tcl, verilog/systemverilog
    -- needs to work just as well with remote servers, whether that's TRAMP based, sshfs based, etc.
    -- peek preview of module decl esp. @ ports
- increase text-based efficiency by putting closer at hand short-cuts for complex actions
    -- swapping regions/lines
    -- incr/decr
    -- form/manip table like text-forms --> hotkey and hydra table-insert and related functions
    -- multiple cursors
    -- auto-format and quick completions and snippets
        --- esp. init templates for new files of type
        --- quick format of module decl and inst in verilog

==========================================================================================================================================================
Co-existing with evil-mc
How the two plugins mingle is entirely personal preference. I often reach for evil-mc for more complex operations and evil-multiedit for simpler ones.

My strategy is to bind evil-multiedit to M-d/M-D, and evil-mc to a bunch of keys prefixed with gz:

;; evil-multiedit
(evil-define-key 'normal 'global
  (kbd "M-d")   #'evil-multiedit-match-symbol-and-next
  (kbd "M-D")   #'evil-multiedit-match-symbol-and-prev)
(evil-define-key 'visual 'global
  "R"           #'evil-multiedit-match-all
  (kbd "M-d")   #'evil-multiedit-match-and-next
  (kbd "M-D")   #'evil-multiedit-match-and-prev)
(evil-define-key '(visual normal) 'global
  (kbd "C-M-d") #'evil-multiedit-restore)

(with-eval-after-load 'evil-mutliedit
  (evil-define-key 'multiedit 'global
    (kbd "M-d")   #'evil-multiedit-match-and-next
    (kbd "M-S-d") #'evil-multiedit-match-and-prev
    (kbd "RET")   #'evil-multiedit-toggle-or-restrict-region)
  (evil-define-key '(multiedit multiedit-insert) 'global
    (kbd "C-n")   #'evil-multiedit-next
    (kbd "C-p")   #'evil-multiedit-prev))

;; evil-mc
(evil-define-key '(normal visual) 'global
  "gzm" #'evil-mc-make-all-cursors
  "gzu" #'evil-mc-undo-all-cursors
  "gzz" #'+evil/mc-toggle-cursors
  "gzc" #'+evil/mc-make-cursor-here
  "gzn" #'evil-mc-make-and-goto-next-cursor
  "gzp" #'evil-mc-make-and-goto-prev-cursor
  "gzN" #'evil-mc-make-and-goto-last-cursor
  "gzP" #'evil-mc-make-and-goto-first-cursor)
(with-eval-after-load 'evil-mc
  (evil-define-key '(normal visual) evil-mc-key-map
    (kbd "C-n") #'evil-mc-make-and-goto-next-cursor
    (kbd "C-N") #'evil-mc-make-and-goto-last-cursor
    (kbd "C-p") #'evil-mc-make-and-goto-prev-cursor
    (kbd "C-P") #'evil-mc-make-and-goto-first-cursor))
==========================================================================================================================================================
