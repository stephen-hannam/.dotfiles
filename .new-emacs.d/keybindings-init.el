(unbind-key "C-." 'evil-normal-state-map)
(global-set-key (kbd "C-h q") #'helpful-kill-buffers)

(global-set-key (kbd "C-h .") nil)
(global-set-key (kbd "M-.") nil)
(global-set-key (kbd "<pause>") nil)

;; Navigate through buffers
(global-set-key (kbd "M-[") 'previous-buffer)
(global-set-key (kbd "M-]") 'next-buffer)
(global-set-key (kbd "<f12>") 'swiper)

(define-key key-translation-map (kbd "<capslock>") (kbd "<escape>"))
;; set keys to insert math symbol
(define-key key-translation-map (kbd "<f9> a") (kbd "α"))
(define-key key-translation-map (kbd "<f9> b") (kbd "β"))
(define-key key-translation-map (kbd "<f9> g") (kbd "γ"))
(define-key key-translation-map (kbd "<f9> d") (kbd "δ"))
(define-key key-translation-map (kbd "<f9> e") (kbd "ε"))
(define-key key-translation-map (kbd "<f9> z") (kbd "ζ"))
(define-key key-translation-map (kbd "<f9> h") (kbd "η"))
(define-key key-translation-map (kbd "<f9> q") (kbd "θ"))
(define-key key-translation-map (kbd "<f9> i") (kbd "ι"))
(define-key key-translation-map (kbd "<f9> k") (kbd "κ"))
(define-key key-translation-map (kbd "<f9> l") (kbd "λ"))
(define-key key-translation-map (kbd "<f9> m") (kbd "μ"))
(define-key key-translation-map (kbd "<f9> n") (kbd "ν")) 
(define-key key-translation-map (kbd "<f9> x") (kbd "ξ"))
(define-key key-translation-map (kbd "<f9> p") (kbd "π"))
(define-key key-translation-map (kbd "<f9> r") (kbd "ρ"))
(define-key key-translation-map (kbd "<f9> s") (kbd "σ"))
(define-key key-translation-map (kbd "<f9> t") (kbd "τ"))
(define-key key-translation-map (kbd "<f9> u") (kbd "υ"))
(define-key key-translation-map (kbd "<f9> f") (kbd "ϕ"))
(define-key key-translation-map (kbd "<f9> j") (kbd "φ"))
(define-key key-translation-map (kbd "<f9> c") (kbd "χ"))
(define-key key-translation-map (kbd "<f9> y") (kbd "ψ"))
(define-key key-translation-map (kbd "<f9> w") (kbd "ω"))
(define-key key-translation-map (kbd "<f9> G") (kbd "Γ"))
(define-key key-translation-map (kbd "<f9> D") (kbd "Δ"))
(define-key key-translation-map (kbd "<f9> Q") (kbd "Θ"))
(define-key key-translation-map (kbd "<f9> L") (kbd "Λ"))
(define-key key-translation-map (kbd "<f9> X") (kbd "Ξ"))
(define-key key-translation-map (kbd "<f9> P") (kbd "Π"))
(define-key key-translation-map (kbd "<f9> S") (kbd "Σ"))
(define-key key-translation-map (kbd "<f9> Y") (kbd "Ψ"))
(define-key key-translation-map (kbd "<f9> W") (kbd "Ω"))
(define-key key-translation-map (kbd "<f9> N") (kbd "∇"))
(define-key key-translation-map (kbd "<f9> <down>") (kbd "↓"))
(define-key key-translation-map (kbd "<f9> <left>") (kbd "←"))
(define-key key-translation-map (kbd "<f9> <right>") (kbd "→"))
(define-key key-translation-map (kbd "<f9> <up>") (kbd "↑"))
(define-key key-translation-map (kbd "<f9> 8") (kbd "★"))
(define-key key-translation-map (kbd "<f9> 6") (kbd "◆"))
(define-key key-translation-map (kbd "<f9> I") (kbd "∞"))

(setq evil-emacs-state-cursor '("#81a2be" box))
(setq evil-normal-state-cursor '("#81a2be" box))
(setq evil-visual-state-cursor '("orange" box))
(setq evil-insert-state-cursor '("green" bar))
(setq evil-replace-state-cursor '("red" box))
(setq evil-operator-state-cursor '("red" hollow))
(evil-define-key '(normal) 'global  (kbd "M-.") #'helpful-at-point)
(evil-define-key '(normal visual insert) 'global  (kbd "M-DEL") 'sp-unwrap-sexp)
(evil-define-key '(normal visual) 'global (kbd "+") 'evil-numbers/inc-at-pt-incremental)
(evil-define-key '(normal visual) 'global (kbd "-") 'evil-numbers/dec-at-pt-incremental)
(evil-define-key '(normal visual) 'global (kbd "C-+") 'evil-numbers/inc-at-pt)
(evil-define-key '(normal visual) 'global (kbd "C--") 'evil-numbers/dec-at-pt)
(evil-define-key '(normal visual) 'global (kbd "R") 'evil-mc-undo-all-cursors)
(evil-define-key '(normal visual) 'global (kbd "!") 'srh/mc-toggle-cursors)
(evil-define-key '(normal visual) 'global (kbd "C-e") 'exit-recursive-edit)
(evil-define-key '(insert) 'global (kbd "C-g") 'evil-normal-state)
(evil-define-key '(normal) 'global (kbd "r") 'evil-replace-state)
(evil-define-key '(normal) 'global (kbd "<left>") 'evil-backward-word-begin)
(evil-define-key '(normal) 'global (kbd "<right>") 'evil-forward-word-end)
(evil-define-key '(normal) 'global (kbd "S-<up>") 'evil-backward-paragraph)
(evil-define-key '(normal) 'global (kbd "S-<down>") 'evil-forward-paragraph)
(evil-define-key '(normal visual insert) 'global (kbd "C-<up>")
  (lambda() (interactive) (scroll-other-window-down 1)))
(evil-define-key '(normal visual insert) 'global (kbd "C-<down>")
  (lambda() (interactive) (scroll-other-window-down -1)))
(evil-define-key '(normal) 'global (kbd "RET") (lambda() (interactive) (evil-insert-newline-below)))
;; :q should kill the current buffer rather than quitting emacs entirely
(evil-ex-define-cmd "q" 'srh/delete-window-maybe-kill-buffer-maybe-delete-frame)
(evil-ex-define-cmd "aq" 'kill-other-buffers)
;; Need to type out :quit to close emacs
(evil-ex-define-cmd "quit" 'evil-quit)

(define-key org-mode-map (kbd "M-S-<up>") nil)
(define-key org-mode-map (kbd "M-S-<down>") nil)
(define-key org-mode-map (kbd "M-S-<left>") nil)
(define-key org-mode-map (kbd "M-S-<right>") nil)
(define-key org-mode-map (kbd "M-<up>") nil)
(define-key org-mode-map (kbd "M-<down>") nil)
(define-key org-mode-map (kbd "M-<left>") nil)
(define-key org-mode-map (kbd "M-<right>") nil)
(define-key org-mode-map [C-S-up] 'org-shiftmetaup)
(define-key org-mode-map [C-S-down] 'org-shiftmetadown)
(define-key org-mode-map [C-S-right] 'org-shiftmetaright)
(define-key org-mode-map [C-S-left] 'org-shiftmetaleft)
(define-key org-mode-map [C-up] 'org-metaup)
(define-key org-mode-map [C-down] 'org-metadown)
(define-key org-mode-map [C-right] 'org-metaright)
(define-key org-mode-map [C-left] 'org-metaleft)
(define-key org-mode-map (kbd "M-\\") 'org-toggle-checkbox)

(define-key map (kbd "M-<up>") #'windmove-up)
(define-key map (kbd "M-<down>") #'windmove-down)
(define-key map (kbd "M-<left>") #'windmove-left)
(define-key map (kbd "M-<right>") #'windmove-right)
(define-key map (kbd "M-S-<up>") #'move-border-up)
(define-key map (kbd "M-S-<down>") #'move-border-down)
(define-key map (kbd "M-S-<left>") #'move-border-left)
(define-key map (kbd "M-S-<right>") #'move-border-right)
(define-key map (kbd "C-<escape>") #'abort-recursive-edit)
(define-key map (kbd "C-s") #'swap-regions)
(define-key map (kbd "C-q") #'kill-current-buffer)
(define-key map (kbd "M-q") #'quoted-insert)
(define-key map (kbd "C-<left>") 'srh/sp-backward-slurp-maybe)
(define-key map (kbd "C-<right>") 'srh/sp-forward-slurp-maybe)
(define-key map (kbd "C-S-<left>") 'srh/sp-backward-barf-maybe)
(define-key map (kbd "C-S-<right>") 'srh/sp-forward-barf-maybe)

(define-key company-active-map (kbd "<tab>") company-complete-common-or-cycle)
(define-key company-active-map (kbd "<f12>") company-filter-candidates)

(bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
(bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map)

(evil-collection-define-key 'normal 'dired-mode-map
  "h" 'dired-hide-dotfiles-mode)
